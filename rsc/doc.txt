GDB PEDA
Extention for gdb, see the stack and register update each instruction 
https://gitlab.com/kalilinux/packages/gdb-peda

https://www.unilim.fr/pages_perso/tristan.vaccon/cours_nasm.pdf ---> nasm cours

https://beta.hackndo.com/buffer-overflow/                               --> buffer owerflow with asm example

https://en.wikipedia.org/wiki/X86_instruction_listings                  --> Instruction
https://beta.hackndo.com/stack-introduction/#prologue---%C3%A9pilogue

https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/     --> Syscalls

https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html   --> Registers info
https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture

https://onecompiler.com/assembly/423f8fy9n                              --> Online assembly compiler


https://stackoverflow.com/questions/26783797/repnz-scas-assembly-instruction-specifics  --> how to while on string



/* gcc basic strlen version, basic while with jump and label, and iter on string */

ft_strlen:
	push   rbp                      ; save rbp
	mov    rbp,rsp                  ; set my own rbb with rsb value
	mov    QWORD [rbp-0x18],rdi     ; store rdi/args pointer in stack rbp - 0x18
	mov    QWORD [rbp-0x8],0x0      ; store index in statck rbp - ox8

	cmp		rdi, 0x0		; rdi NULL
	je		_ft_strlen_exit ; jump equal exit
	jmp    _ft_strlen_mov   ; jmp start while

_ft_strlen_add:             
	add    QWORD [rbp-0x8],0x1  ; increment index

;rbp-0x18    = str
;rbp-0x8     = i

_ft_strlen_mov:             ; start while
    ;rdx = str
	mov    rdx,QWORD [rbp-0x18]     ; store args pointer value in rdx
    ;rax = i
	mov    rax,QWORD [rbp-0x8]      ; store index in rax
    ;rax += str AKA str += i AKA str + i
	add    rax,rdx                  ; rax += rdx, we are a the good adress to take char
    ;char c = *rax
    movzx  eax,BYTE [rax]           ; put byte rax in eax
    ;c == 0 
    test   al,al                    ; test al, al is a sub register of eax, represent lowerbyte
    ;if c not equal 0 jump to add
    jne    _ft_strlen_add


_ft_strlen_exit:
	mov    rax,QWORD [rbp-0x8]
	pop    rbp
	ret


Chapter IV
Bonus part
You can rewrite these functions in asm. The linked list function will use the following structure:
Libasm subject reclaim :
typedef struct s_list
{
void *data;
struct s_list *next;
} t_list;
• ft_atoi_base (like the one in the piscine) :
https://cdn.intra.42.fr/pdf/pdf/119458/en.subject.pdf --> c piscine 5
• ft_list_push_front (like the one in the piscine)
• ft_list_size (like the one in the piscine)
• ft_list_sort (like the one in the piscine)
void ft_list_sort(t_list **begin_list, int (*cmp)());
• ft_list_remove_if (like the one in the piscine):
void ft_list_remove_if(t_list **begin_list, void *data_ref, int (*cmp)(), void (*free_fct)(void *));
https://cdn.intra.42.fr/pdf/pdf/121967/en.subject.pdf --> c piscine 12 
C12 subject reclaim :
typedef struct s_list
{
struct s_list *next;
void *data;
} t_list;
I'ts 'just' field order but in asm, this change the written code (reverse compute to access at next or data field)
I choice to follow libasm subject structure and implement function like C 12 pdf;