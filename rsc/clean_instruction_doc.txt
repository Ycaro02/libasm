Clean Instruction Presentation

- move movsb movzx ...
https://docs.oracle.com/cd/E19620-01/805-4693/instructionset-64/index.html  --> how to copy data 
movsb move data from string to string 
- movsb: move string byte -> https://faculty.kfupm.edu.sa/COE/aimane/assembly/pagegen.aspx-ThemeID=1&m185_20.htm
-	movsxd:	Cette instruction permet de copier un registre de taille inférieur dans un registre 
	64 bits en remplissant les bits supplémentaires avec l'extension des signes.
- 	movzx : operandedestination(register), operandesource
	Cette instruction permet de copier un registre de taille inférieur dans un registre de plus grande taille 
	en remplissant les bits supplémentaires par des 0.

---
Instruction: MOV
Operand(s) Supported: Source, Destination
Description: The MOV (MOVe) instruction is used to move data from a source to a destination.
---
Instruction: MOVZX
Operand(s) Supported: Source, Destination
Description: The MOVZX (MOVe with Zero eXtension) instruction moves the source operand to the destination operand,
zero-extending it to the size of the destination operand. It is typically used to clear upper bits when moving data between 
registers or memory locations of different sizes.
---
Instruction: MOVSX
Operand(s) Supported: Source, Destination
Description: The MOVSX (MOVe with Sign eXtension) instruction moves the source operand to the destination operand, 
sign-extending it to the size of the destination operand. It is commonly used to preserve the sign of data when moving 
between registers or memory locations of different sizes.
---
Instruction: MOVSXD
Operand(s) Supported: Source, Destination
Description: The MOVSXD (MOVe with Sign eXtension of Doubleword) instruction is used in 64-bit mode to move a signed doubleword 
from a 32-bit source to a 64-bit destination, sign-extending the value to fill the 64-bit destination.
---

---
Instruction: CMP
Operand(s) Supported: Source, Destination
Description: The CMP (CoMPare) instruction compares the values of two operands. 
It performs a subtraction between the operands but does not store the result, only updating the status flags. 
It is commonly used in conditional branching instructions to determine whether a branch should be taken based on the result of the comparison.
---
Instruction: SETE
Operand(s) Supported: Destination
Description: The SETE (SET if Equal) instruction sets the destination operand to 1 if the Zero Flag (ZF) 
is set (indicating that the previous comparison resulted in equality); otherwise, it sets the destination operand to 0.
---
Instruction: JE (Jump if Equal)
Operand(s) Supported: Relative displacement
Description: The JE instruction performs a jump to a specified target address if the Zero Flag (ZF) is set, 
indicating that the two compared operands are equal.
---
Instruction: JL (Jump if Less), JNE (Jump if no Equal), JLE (Jump if Less equal), JG (Jump if Greater), JZ (Jump if Zero flag (ZF))
Operand(s) Supported: Relative displacement
Description: The JL instruction performs a jump to a specified target address if the Sign Flag (SF) is not equal to the Overflow Flag (OF), 
indicating that the most recent comparison resulted in a signed less-than condition.
https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm ----> jump usage
---

---
Instruction: SYSCALL
Operand(s) Supported: None
Description: The SYSCALL instruction is used in 64-bit mode to make a system call to the kernel. 
It transfers control to the operating system to request services such as I/O operations, process management, and more.
---
Instruction: CALL
Operand(s) Supported: Target address
Description: The CALL instruction is used to call a subroutine or procedure. 
It pushes the return address onto the stack and then jumps to the specified target address. 
Upon completion of the subroutine, the RET instruction is typically used to return control to the calling routine.
---

---
Instruction: PUSH
Operand(s) Supported: Source
Description: The PUSH instruction pushes the source operand onto the top of the stack. 
It decrements the stack pointer (ESP or RSP) and stores the operand in the memory location pointed to by the stack pointer.
---
Instruction: POP
Operand(s) Supported: Destination
Description: The POP instruction pops the topmost value from the stack and stores it in the destination operand. 
It increments the stack pointer (ESP or RSP) after retrieving the value.
---
Instruction: RET
Operand(s) Supported: None
Description: The RET (RETurn) instruction is used to return control from a subroutine to the calling routine.
It pops the return address from the stack and jumps to that address.
---

---
Instruction: ADD
Operand(s) Supported: Source, Destination
Description: The ADD instruction adds the source operand to the destination operand and stores the result 
in the destination operand. It updates the status flags based on the result of the addition.
---
Instruction: SUB
Operand(s) Supported: Source, Destination
Description: The SUB (SUBtract) instruction subtracts the source operand from the destination operand 
and stores the result in the destination operand. It updates the status flags based on the result of the subtraction.
---
Instruction: IMUL
Operand(s) Supported: Source, Destination
Description: The IMUL (Integer MULtiply) instruction performs signed integer multiplication of the source
operand with the destination operand. It stores the result in the destination operand, and it may
also set the overflow and carry flags depending on the result.
---

---
Instruction: TEST
Operand(s) Supported: Source, Destination
Description: The TEST instruction performs a bitwise AND operation between the source and destination operands, 
updating the status flags based on the result without storing the result. 
It is often used to check for the presence of specific bits or to perform a null test.
---
Instruction: XOR
Operand(s) Supported: Source, Destination
Description: The XOR (eXclusive OR) instruction performs a bitwise XOR operation between the source and destination operands, 
storing the result in the destination operand. Each bit of the result is set to 1 if the corresponding bits of the operands are different,
otherwise, it is set to 0. XOR operations are commonly used for bitwise manipulation, clearing specific bits, or toggling bits.
---
Instruction: NEG
Operand(s) Supported: Destination
Description: The NEG (NEGate) instruction negates the value of the destination operand. 
It performs a two's complement negation, effectively changing the sign of the operand.
---

---
Instruction: REP
Operand(s) Supported: None
Description: The REP (REPeat) instruction is used in conjunction with string manipulation instructions such as MOVS, STOS, INS, and OUTS. 
It causes the specified string operation to repeat until the ECX register becomes zero or the specified condition is met.
---
Instruction: REPZ
Operand(s) Supported: None
Description: The REPZ (REPeat while Zero) instruction is a specific form of the REP instruction.
It causes the string operation to repeat while the Zero Flag (ZF) is set, or until the ECX register becomes zero.
---
Instruction: SCASB
Operand(s) Supported: None
Description: The SCASB (SCan String for Byte) instruction compares the byte in the AL register with the byte at the address specified by the ES:DI or ES:EDI register pair. 
It sets the status flags based on the result of the comparison and increments or decrements the DI or EDI register depending on the direction flag (DF) in the FLAGS register.
---
Instruction: CLD
Operand(s) Supported: None
Description: The CLD (CLear Direction flag) instruction clears the Direction Flag (DF) in the FLAGS register. 
This causes string manipulation instructions to auto-increment the index registers (such as DI or EDI) after each operation, allowing them to move forward through memory.
---

- rep -repz -repnz
Use the rep (repeat while equal), repnz (repeat while nonzero) or repz (repeat while zero) prefixes in conjunction with string operations. 
Each prefix causes the associated string instruction to repeat until the count register (CX) or the zero flag (ZF) matches a tested condition.
---
- repnz scasb:
repnz means "repeat until zero flag is not set and cx is not zero". Each iteration decrements ecx. 
scas or more precisely scasb compares the value in al to the memory operand (always es:[edi] or es:[di] depending on address size), 
then sets the flags accordingly (zero flag will be set if the two values equal) 
and increments (or decrements, based on the direction flag) edi.